{"componentChunkName":"component---src-templates-doc-template-js","path":"/docs/rule","webpackCompilationHash":"7aca27b52be9a9754b63","result":{"data":{"markdownRemark":{"html":"<h1 id=\"developing-a-custom-rule\"><a href=\"#developing-a-custom-rule\" aria-label=\"developing a custom rule permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Developing a Custom Rule</h1>\n<p>Each rule needs to implement the <code class=\"language-text\">lint.Rule</code> interface:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Rule <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span>\n    <span class=\"token function\">Apply</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>File<span class=\"token punctuation\">,</span> Arguments<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>Failure\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <code class=\"language-text\">Arguments</code> type is an alias of the type <code class=\"language-text\">[]interface{}</code>. The arguments of the rule are passed from the configuration file.</p>\n<h2 id=\"example\"><a href=\"#example\" aria-label=\"example permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h2>\n<p>Let us develop a rule called <code class=\"language-text\">ArgumentsLimitRule</code> which sets a restriction on the number of arguments that a function may accept. As we explained above, our rule needs to implement the <code class=\"language-text\">Rule</code> interface:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> rule\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"fmt\"</span>\n    <span class=\"token string\">\"go/ast\"</span>\n\n    <span class=\"token string\">\"github.com/mgechev/revive/lint\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// ArgumentsLimitRule lints given else constructs.</span>\n<span class=\"token keyword\">type</span> ArgumentsLimitRule <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Apply applies the rule to given file.</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span>ArgumentsLimitRule<span class=\"token punctuation\">)</span> <span class=\"token function\">Apply</span><span class=\"token punctuation\">(</span>file <span class=\"token operator\">*</span>lint<span class=\"token punctuation\">.</span>File<span class=\"token punctuation\">,</span> arguments lint<span class=\"token punctuation\">.</span>Arguments<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>lint<span class=\"token punctuation\">.</span>Failure <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">return</span> failures\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Name returns the rule name.</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span>ArgumentsLimitRule<span class=\"token punctuation\">)</span> <span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"argument-limit\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> lintArgsNum <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    total     <span class=\"token builtin\">int</span>\n    onFailure <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>lint<span class=\"token punctuation\">.</span>Failure<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>w lintArgsNum<span class=\"token punctuation\">)</span> <span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span>n ast<span class=\"token punctuation\">.</span>Node<span class=\"token punctuation\">)</span> ast<span class=\"token punctuation\">.</span>Visitor <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In the snippet above, we first import the packages <code class=\"language-text\">fmt</code>, <code class=\"language-text\">go/ast</code> and the <code class=\"language-text\">lint</code> package from <code class=\"language-text\">revive</code>. After that we define a struct called <code class=\"language-text\">ArgumentsLimitRule</code> which has two methods <code class=\"language-text\">Apply</code> and <code class=\"language-text\">Name</code>. <code class=\"language-text\">Apply</code> accepts a file and the rule's argument, and <code class=\"language-text\">Name</code> simply returns the name of the rule.</p>\n<p>Notice how we also have the declaration of the <code class=\"language-text\">lintArgsNum</code> struct. We're going to use it to traverse the program's AST.</p>\n<p>Now let us fill the blanks!</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// ...</span>\n<span class=\"token comment\">// Apply applies the rule to given file.</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span>ArgumentsLimitRule<span class=\"token punctuation\">)</span> <span class=\"token function\">Apply</span><span class=\"token punctuation\">(</span>file <span class=\"token operator\">*</span>lint<span class=\"token punctuation\">.</span>File<span class=\"token punctuation\">,</span> arguments lint<span class=\"token punctuation\">.</span>Arguments<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>lint<span class=\"token punctuation\">.</span>Failure <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">`invalid configuration for \"argument-limit\"`</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    total<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> arguments<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int64</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Alt. non panicking version</span>\n    <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>ok <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">`invalid value passed as argument number to the \"argument-list\" rule`</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">var</span> failures <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>lint<span class=\"token punctuation\">.</span>Failure\n\n    walker <span class=\"token operator\">:=</span> lintArgsNum<span class=\"token punctuation\">{</span>\n        total<span class=\"token punctuation\">:</span> <span class=\"token function\">int</span><span class=\"token punctuation\">(</span>total<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        onFailure<span class=\"token punctuation\">:</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>failure lint<span class=\"token punctuation\">.</span>Failure<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            failures <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>failures<span class=\"token punctuation\">,</span> failure<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n\n    ast<span class=\"token punctuation\">.</span><span class=\"token function\">Walk</span><span class=\"token punctuation\">(</span>walker<span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">.</span>AST<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> failures\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// ...</span></code></pre></div>\n<p>In the example above we perform the following algorithm:</p>\n<ul>\n<li>We first validate the arguments. The rule should accept a single argument of type <code class=\"language-text\">int64</code>, specifying the total number of allowed arguments</li>\n<li>After that, we define a slice of type <code class=\"language-text\">[]lint.Failure</code> which we'll fill during the AST traversal</li>\n<li>As the next step, we create a new instance of the struct <code class=\"language-text\">lintArgsNum</code>. The struct has two fields: <code class=\"language-text\">total</code>, which specifies the rule's arguments, and <code class=\"language-text\">onFailure</code>. The struct's instance will invoke the <code class=\"language-text\">onFailure</code> callback when it finds a new failure. Inside of this callback, we'll push the failure to the list of failures</li>\n<li>Next, we start the AST traversal</li>\n<li>Finally, we return the slice of collected failures</li>\n</ul>\n<p>That's pretty much everything in the rule's declaration!</p>\n<p>Now let us explore the AST traversal algorithm:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> lintArgsNum <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    total     <span class=\"token builtin\">int</span>\n    onFailure <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>lint<span class=\"token punctuation\">.</span>Failure<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>w lintArgsNum<span class=\"token punctuation\">)</span> <span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span>n ast<span class=\"token punctuation\">.</span>Node<span class=\"token punctuation\">)</span> ast<span class=\"token punctuation\">.</span>Visitor <span class=\"token punctuation\">{</span>\n    node<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ast<span class=\"token punctuation\">.</span>FuncDecl<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> ok <span class=\"token punctuation\">{</span>\n        num <span class=\"token operator\">:=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> l <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> node<span class=\"token punctuation\">.</span>Type<span class=\"token punctuation\">.</span>Params<span class=\"token punctuation\">.</span>List <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token keyword\">range</span> l<span class=\"token punctuation\">.</span>Names <span class=\"token punctuation\">{</span>\n                num<span class=\"token operator\">++</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> num <span class=\"token operator\">></span> w<span class=\"token punctuation\">.</span>total <span class=\"token punctuation\">{</span>\n            w<span class=\"token punctuation\">.</span><span class=\"token function\">onFailure</span><span class=\"token punctuation\">(</span>lint<span class=\"token punctuation\">.</span>Failure<span class=\"token punctuation\">{</span>\n                Confidence<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n                Failure<span class=\"token punctuation\">:</span>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"maximum number of arguments per function exceeded; max %d but got %d\"</span><span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">.</span>total<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                Node<span class=\"token punctuation\">:</span>       node<span class=\"token punctuation\">.</span>Type<span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> w\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> w\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <code class=\"language-text\">lintArgsNum</code> struct implements the <code class=\"language-text\">ast.Visitor</code> interface, which means that it has a method called <code class=\"language-text\">Visit</code> which accepts an <code class=\"language-text\">ast.Node</code> and returns an <code class=\"language-text\">ast.Visitor</code>.</p>\n<p>Inside of the <code class=\"language-text\">Visit</code> method, we check if the current node is of type <code class=\"language-text\">*ast.FuncDecl</code>, and if it is, we validate the number of arguments the given function accepts. If it accepts more than the value of the property <code class=\"language-text\">total</code>, then we invoke the <code class=\"language-text\">onFailure</code> callback with the failure object.</p>\n<h2 id=\"conclusion\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p>In this guide we saw how we can implement a new rule in the framework for static code analysis for Go, revive.</p>\n<p>We first explained how revive passes arguments defiled in the config file to the rules. After that, we looked at the <code class=\"language-text\">lint.Rule</code> interface and implemented it in the rule <code class=\"language-text\">ArgumentsLimitRule</code>. In the rule, we traversed the AST using the <code class=\"language-text\">lintArgsNum</code> visitor which collected all the warnings it found in the process.</p>","frontmatter":{"path":"/docs/rule"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}