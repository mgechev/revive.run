{"componentChunkName":"component---src-templates-doc-template-js","path":"/docs/formatter","webpackCompilationHash":"d47de17d31fa0fb1530e","result":{"data":{"markdownRemark":{"html":"<h1 id=\"developing-a-custom-formatter\"><a href=\"#developing-a-custom-formatter\" aria-label=\"developing a custom formatter permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Developing a Custom Formatter</h1>\n<p>Each formatter needs to implement the following interface:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Formatter <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;-</span><span class=\"token keyword\">chan</span> Failure<span class=\"token punctuation\">,</span> RulesConfig<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <code class=\"language-text\">Format</code> method accepts a channel of <code class=\"language-text\">Failure</code> instances and the configuration of the enabled rules. The <code class=\"language-text\">Name()</code> method should return a string different from the names of the already existing rules. This string is used when specifying the formatter when invoking the <code class=\"language-text\">revive</code> CLI tool.</p>\n<h2 id=\"example\"><a href=\"#example\" aria-label=\"example permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h2>\n<p>Let us implement a sample formatter which outputs the rule failures to plain text.</p>\n<p>First, you need to clone the repository and create a file under <code class=\"language-text\">revive/formatter</code> called <code class=\"language-text\">sample.go</code>. After that, add the following imports and struct declaration:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> formatter\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"fmt\"</span>\n\n    <span class=\"token string\">\"github.com/mgechev/revive/lint\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">type</span> Sample <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    Metadata lint<span class=\"token punctuation\">.</span>FormatterMetadata\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now, <code class=\"language-text\">Sample</code> has to implement the <code class=\"language-text\">Formatter</code> interface, which means that we need to define two methods: <code class=\"language-text\">Name</code> which returns the name of the formatter, and the method <code class=\"language-text\">Format</code>. As a first argument <code class=\"language-text\">Format</code> receives a channel where we'll receive the failures, and as second argument the method accepts the user's configuration.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>f <span class=\"token operator\">*</span>Sample<span class=\"token punctuation\">)</span> <span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"sample\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Format formats the failures gotten from the lint.</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>f <span class=\"token operator\">*</span>Sample<span class=\"token punctuation\">)</span> <span class=\"token function\">Format</span><span class=\"token punctuation\">(</span>failures <span class=\"token operator\">&lt;-</span><span class=\"token keyword\">chan</span> lint<span class=\"token punctuation\">.</span>Failure<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> lint<span class=\"token punctuation\">.</span>RulesConfig<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> failure <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> failures <span class=\"token punctuation\">{</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%v: %s\\n\"</span><span class=\"token punctuation\">,</span> failure<span class=\"token punctuation\">.</span>Position<span class=\"token punctuation\">.</span>Start<span class=\"token punctuation\">,</span> failure<span class=\"token punctuation\">.</span>Failure<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In the implementations above, <code class=\"language-text\">Name</code> returns the string <code class=\"language-text\">&quot;sample&quot;</code> and <code class=\"language-text\">Format</code> prints the failures one by one, first displaying the failure's position and after that its description.</p>","frontmatter":{"path":"/docs/formatter"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}